{"version":3,"sources":["contexts/ThemeContext.js","contexts/SocketContext.js","components/Header.js","contexts/ChatContext.js","components/ChatArea.js","contexts/UserNameContext.js","components/Input.js","components/interface.js","contexts/Provider.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeProvider","children","useState","localStorage","getItem","Theme","setTheme","useEffect","setItem","Provider","value","SocketContext","SocketProvider","io","socket","Header","alerts","setAlerts","useContext","on","newUser","setTimeout","userName","toggleTheme","e","className","onClick","style","width","height","viewBox","fill","d","ChatContext","ChatProvider","Messages","setMessages","refreshMessage","JSON","parse","ChatArea","msgRef","useRef","current","scrollIntoView","map","msg","index","length","ref","key","message","user","autoFocus","UserNameContext","UserNameProvider","UserName","setUserName","Input","nameModalIsOpen","setNameModalIsOpen","name","setName","newMessage","setNewMessage","emit","oldMessages","stringify","onChange","target","type","preventDefault","Interface","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"iQAEaA,EAAeC,0BAEb,SAASC,EAAT,GAAsC,IAAbC,EAAY,EAAZA,SAAY,EAEzBC,mBAASC,aAAaC,QAAQ,qBAFL,mBAE5CC,EAF4C,KAErCC,EAFqC,KAUnD,OANAC,qBAAU,WAETJ,aAAaK,QAAQ,mBAAoBH,KAEvC,CAACA,IAIF,kBAACP,EAAaW,SAAd,CAAuBC,MAAO,CAACL,QAAOC,aACpCL,G,qBCdQU,EAAgBZ,0BAEd,SAASa,EAAT,GAAuC,IAAbX,EAAY,EAAZA,SAAY,EAEnCC,mBAASW,IAAG,MAAtBC,EAF6C,oBAIpD,OACE,kBAACH,EAAcF,SAAf,CAAwBC,MAAOI,GAC5Bb,GCLS,SAASc,IAAU,IAAD,EAEJb,mBAAS,CAAC,GAAG,KAFT,mBAEzBc,EAFyB,KAEjBC,EAFiB,OAGJC,qBAAWpB,GAA/BO,EAHwB,EAGxBA,MAAOC,EAHiB,EAGjBA,SACTQ,EAASI,qBAAWP,GAE1BJ,qBAAU,WAETO,EAAOK,GAAG,YAAY,SAAAC,GACrBH,EAAU,CAACG,EAAQ,YAAa,YAChCC,YAAW,WACVJ,EAAU,CAAC,GAAG,OACZ,QAGJH,EAAOK,GAAG,qBAAqB,SAAAG,GAC9BL,EAAU,CAACK,EAAS,eAAgB,WACpCD,YAAW,WACVJ,EAAU,CAAC,GAAG,OACZ,UAGF,IAEH,IAAMM,EAAc,SAAAC,GACnBlB,EAAmB,SAAVD,EAAmB,GAAK,SAGlC,OACC,yBAAKoB,UAAU,WACd,yBAAKA,UAAS,wBAAmBT,EAAO,GAAP,sBAA2BA,EAAO,IAAO,KACzEA,EAAO,IAER,wBAAIS,UAAU,iBAAd,WACA,yBAAKA,UAAU,uBACd,yBACCC,QAASH,EACTE,UAAU,MACVE,MAAO,CAACC,MAAM,GAAGC,OAAO,IACxBC,QAAQ,aAEL,0BAAMC,KAAK,eAAeC,EAAE,0XAEhC,yBACCN,QAASH,EACTE,UAAU,OACVE,MAAO,CAACC,MAAM,GAAGC,OAAO,IACxBC,QAAQ,aAEL,0BAAMC,KAAK,eAAeC,EAAE,goBCrD7B,IAAMC,EAAclC,0BAEZ,SAASmC,EAAT,GAAqC,IAAbjC,EAAY,EAAZA,SAAY,EAElBC,mBAAS,IAFS,mBAE3CiC,EAF2C,KAEjCC,EAFiC,KAYlD,OAJA7B,qBAAU,WACTJ,aAAaK,QAAQ,sBAAuB,MAC1C,IAGD,kBAACyB,EAAYxB,SAAb,CAAsBC,MAAO,CAACyB,WAAUE,eATnB,WACtBD,EAAYE,KAAKC,MAAMpC,aAAaC,QAAQ,4BASxCH,GCbS,SAASuC,IAAY,IAE3BL,EAAajB,qBAAWe,GAAxBE,SAEFM,EAASC,mBASf,OAPAnC,qBAAU,WACNkC,EAAOE,SACTF,EAAOE,QAAQC,gBAAe,KAE7B,CAACT,IAIH,yBAAKV,UAAU,kBACd,4BAEEU,EAASU,KAAI,SAACC,EAAIC,GACjB,OAAGA,IAAUZ,EAASa,OAAS,EACtB,wBACLC,IAAKR,EACLS,IAAKJ,EAAIK,QACT1B,UAAS,yBAAiC,QAAbqB,EAAIM,KAAe,cAAe,IAC/DC,WAAS,GAET,+BAAqB,QAAbP,EAAIM,KAAiB,GAAKN,EAAIM,MACtC,2BAAIN,EAAIK,UAEJ,wBACLD,IAAKJ,EAAIK,QACT1B,UAAS,yBAAiC,QAAbqB,EAAIM,KAAe,cAAe,IAC/DC,WAAS,GAET,+BAAqB,QAAbP,EAAIM,KAAiB,GAAKN,EAAIM,MACtC,2BAAIN,EAAIK,e,YCrCJG,EAAkBvD,0BAEhB,SAASwD,EAAT,GAAyC,IAAbtD,EAAY,EAAZA,SAAY,EAGtBC,mBAASC,aAAaC,QAAQ,yBAHR,mBAG/CoD,EAH+C,KAGrCC,EAHqC,KAWtD,OANAlD,qBAAU,WAETJ,aAAaK,QAAQ,uBAAwBgD,KAE3C,CAACA,IAGF,kBAACF,EAAgB7C,SAAjB,CAA0BC,MAAO,CAAC8C,WAAUC,gBAC1CxD,GCXU,SAASyD,IAAS,IAAD,EAEexD,mBAAS,gBAFxB,mBAExByD,EAFwB,KAEPC,EAFO,OAGP1D,mBAAS,IAHF,mBAGxB2D,EAHwB,KAGlBC,EAHkB,OAIK5D,mBAAS,IAJd,mBAIxB6D,EAJwB,KAIZC,EAJY,OAMG9C,qBAAWoC,GAArCE,EANuB,EAMvBA,SAAUC,EANa,EAMbA,YACVpB,EAAmBnB,qBAAWe,GAA9BI,eACFvB,EAASI,qBAAWP,GAE1BJ,qBAAU,WAETqD,EAAmBJ,EAAW,eAAiB,SAE/C1C,EAAOmD,KAAK,iBAAkBT,GAE9B1C,EAAOK,GAAG,oBAAoB,SAAAgC,GAC7B,IAAMe,EAAc5B,KAAKC,MAAMpC,aAAaC,QAAQ,wBAA0B,MAC9ED,aAAaK,QAAQ,sBAAuB8B,KAAK6B,UAAL,sBAAmBD,GAAnB,CAA+Bf,MAC3Ed,SAGC,IAkBH,OACC,oCACA,0BAAMZ,UAAU,kBACf,2BACCf,MAAOqD,EACPK,SAAU,SAAA5C,GAAC,OAAIwC,EAAcxC,EAAE6C,OAAO3D,QACtC4D,KAAK,OACL7C,UAAU,cAAc4B,WAAS,IAElC,4BAAQ3B,QAlBS,SAAAF,GAClBA,EAAE+C,iBACFzD,EAAOmD,KAAK,cAAeF,GAC3B,IAAMG,EAAc5B,KAAKC,MAAMpC,aAAaC,QAAQ,wBAA0B,MAC9ED,aAAaK,QAAQ,sBAAuB8B,KAAK6B,UAAL,sBAAmBD,GAAnB,CAAgC,CAACd,KAAK,MAAMD,QAAQY,OAChGC,EAAc,IACd3B,KAY8BiC,KAAK,SAAS7C,UAAU,OAArD,SAED,yBAAKA,UAAWkC,GACf,yBAAKlC,UAAU,mBACd,0CACA,8BACC,2BACCf,MAAOmD,EACPO,SAAU,SAAA5C,GAAC,OAAIsC,EAAQtC,EAAE6C,OAAO3D,QAChCe,UAAU,cACV6C,KAAK,OAAOjB,WAAS,IAEtB,4BAAQiB,KAAK,SAAS5C,QArCV,SAAAF,GACfA,EAAE+C,iBACFd,EAAYI,GACZ/C,EAAOmD,KAAK,iBAAkBJ,GAC9BD,EAAmB,iBAiCwBnC,UAAU,OAAlD,UC3DU,SAAS+C,IAAa,IAE5BnE,EAAUa,qBAAWpB,GAArBO,MAER,OACC,yBAAKoB,UAAS,oBAAepB,IAC5B,kBAACU,EAAD,MACA,kBAACyB,EAAD,MACA,kBAACkB,EAAD,OCVY,SAASjD,EAAT,GAAiC,IAAbR,EAAY,EAAZA,SAClC,OACC,kBAACW,EAAD,KACC,kBAACZ,EAAD,KACC,kBAACuD,EAAD,KACC,kBAACrB,EAAD,KACGjC,M,MCIOwE,MAXf,WAIE,OACE,kBAAChE,EAAD,KACE,kBAAC+D,EAAD,QCCcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMxC,c","file":"static/js/main.9ea2a1db.chunk.js","sourcesContent":["import React, { createContext, useEffect, useState } from 'react';\n\nexport const ThemeContext = createContext();\n\nexport default function ThemeProvider({ children }) {\n\n\tconst [Theme, setTheme] = useState(localStorage.getItem('g-chatting-theme'));\n\n\tuseEffect(() => {\n\n\t\tlocalStorage.setItem(\"g-chatting-theme\", Theme)\n\n\t}, [Theme])\n\n\treturn (\n\n\t\t\t<ThemeContext.Provider value={{Theme, setTheme}}>\n\t\t\t\t{children}\n\t\t\t</ThemeContext.Provider>\n\n\t\t)\n\n}","import React, { createContext, useState } from \"react\";\nimport io from 'socket.io-client';\n\nexport const SocketContext = createContext();\n\nexport default function SocketProvider({ children }) {\n\n\tconst [socket] = useState(io('/'))\n\n\treturn (\n\t\t\t<SocketContext.Provider value={socket}>\n\t\t\t\t{ children }\n\t\t\t</SocketContext.Provider>\n\t\t)\n}","import React, { useContext, useEffect, useState } from 'react';\n\nimport { ThemeContext } from \"../contexts/ThemeContext\";\nimport { SocketContext } from \"../contexts/SocketContext\";\n\n\nexport default function Header() {\n\n\tconst [alerts, setAlerts] = useState(['','']);\n\tconst { Theme, setTheme } = useContext(ThemeContext);\n\tconst socket = useContext(SocketContext);\n\n\tuseEffect(() => {\n\n\t\tsocket.on(\"new_user\", newUser => {\n\t\t\tsetAlerts([newUser+'connected', 'success'])\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetAlerts(['',''])\n\t\t\t}, 3000)\n\t\t})\n\n\t\tsocket.on(\"user_disconnected\", userName => {\n\t\t\tsetAlerts([userName+'disconnected', 'danger'])\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetAlerts(['',''])\n\t\t\t}, 3000)\n\t\t})\n\n\t}, [])\n\n\tconst toggleTheme = e => {\n\t\tsetTheme(Theme === 'dark' ? \"\" : \"dark\");\n\t}\n\n\treturn (\n\t\t<div className=\"heading\">\n\t\t\t<div className={`heading-child ${alerts[0] ? `alert alert-${alerts[1]}` : '' }`}>\n\t\t\t{alerts[0]}\n\t\t\t</div>\n\t\t\t<h1 className=\"heading-child\">ChatApp</h1>\n\t\t\t<div className=\"icons heading-child\">\n\t\t\t\t<svg \n\t\t\t\t\tonClick={toggleTheme} \n\t\t\t\t\tclassName=\"sun\" \n\t\t\t\t\tstyle={{width:24,height:24}} \n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t>\n\t\t\t\t    <path fill=\"currentColor\" d=\"M3.55,18.54L4.96,19.95L6.76,18.16L5.34,16.74M11,22.45C11.32,22.45 13,22.45 13,22.45V19.5H11M12,5.5A6,6 0 0,0 6,11.5A6,6 0 0,0 12,17.5A6,6 0 0,0 18,11.5C18,8.18 15.31,5.5 12,5.5M20,12.5H23V10.5H20M17.24,18.16L19.04,19.95L20.45,18.54L18.66,16.74M20.45,4.46L19.04,3.05L17.24,4.84L18.66,6.26M13,0.55H11V3.5H13M4,10.5H1V12.5H4M6.76,4.84L4.96,3.05L3.55,4.46L5.34,6.26L6.76,4.84Z\" />\n\t\t\t\t</svg>\n\t\t\t\t<svg \n\t\t\t\t\tonClick={toggleTheme} \n\t\t\t\t\tclassName=\"moon\" \n\t\t\t\t\tstyle={{width:24,height:24}} \n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t>\n\t\t\t\t    <path fill=\"currentColor\" d=\"M17.75,4.09L15.22,6.03L16.13,9.09L13.5,7.28L10.87,9.09L11.78,6.03L9.25,4.09L12.44,4L13.5,1L14.56,4L17.75,4.09M21.25,11L19.61,12.25L20.2,14.23L18.5,13.06L16.8,14.23L17.39,12.25L15.75,11L17.81,10.95L18.5,9L19.19,10.95L21.25,11M18.97,15.95C19.8,15.87 20.69,17.05 20.16,17.8C19.84,18.25 19.5,18.67 19.08,19.07C15.17,23 8.84,23 4.94,19.07C1.03,15.17 1.03,8.83 4.94,4.93C5.34,4.53 5.76,4.17 6.21,3.85C6.96,3.32 8.14,4.21 8.06,5.04C7.79,7.9 8.75,10.87 10.95,13.06C13.14,15.26 16.1,16.22 18.97,15.95M17.33,17.97C14.5,17.81 11.7,16.64 9.53,14.5C7.36,12.31 6.2,9.5 6.04,6.68C3.23,9.82 3.34,14.64 6.35,17.66C9.37,20.67 14.19,20.78 17.33,17.97Z\" />\n\t\t\t\t</svg>\n\t\t\t</div>\n\t\t</div>\n\t)\n}","import React, { createContext, useState, useEffect } from \"react\";\n\nexport const ChatContext = createContext();\n\nexport default function ChatProvider({ children }) {\n\n\tconst [Messages, setMessages] = useState([])\n\n\tconst refreshMessage = () => {\n\t\tsetMessages(JSON.parse(localStorage.getItem(\"g-chatting-messages\")))\n\t}\n\n\tuseEffect(() => {\n\t\tlocalStorage.setItem(\"g-chatting-messages\", [])\n\t}, [])\n\n\treturn (\n\t\t\t<ChatContext.Provider value={{Messages, refreshMessage}}>\n\t\t\t\t{ children }\n\t\t\t</ChatContext.Provider>\n\t\t)\n}","import React, { useContext, useRef, useEffect } from 'react';\n\nimport { ChatContext } from \"../contexts/ChatContext\";\n\n\nexport default function ChatArea() {\n\n\tconst { Messages } = useContext(ChatContext);\n\n\tconst msgRef = useRef()\n\n\tuseEffect(() => {\n\t\tif(msgRef.current){\n\t\t\tmsgRef.current.scrollIntoView(true);\n\t\t}\n\t}, [Messages])\n\n\n\treturn (\n\t\t<div className=\"chat-container\">\n\t\t\t<ul>\n\t\t\t\t{\n\t\t\t\t\tMessages.map((msg,index) => {\n\t\t\t\t\t\tif(index === Messages.length - 1)\n\t\t\t\t\t\t\treturn (<li \n\t\t\t\t\t\t\t\t\t\tref={msgRef}\n\t\t\t\t\t\t\t\t\t\tkey={msg.message} \n\t\t\t\t\t\t\t\t\t\tclassName={`chat-list-item ${msg.user === 'You'?'our-message': ''}`}\n\t\t\t\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<small>{msg.user === \"You\" ? '' : msg.user}</small>\n\t\t\t\t\t\t\t\t\t\t<p>{msg.message}</p>\n\t\t\t\t\t\t\t\t\t</li>)\n\t\t\t\t\t\treturn (<li \n\t\t\t\t\t\t\t\t\tkey={msg.message} \n\t\t\t\t\t\t\t\t\tclassName={`chat-list-item ${msg.user === 'You'?'our-message': ''}`}\n\t\t\t\t\t\t\t\t\tautoFocus\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<small>{msg.user === \"You\" ? '' : msg.user}</small>\n\t\t\t\t\t\t\t\t\t<p>{msg.message}</p>\n\t\t\t\t\t\t\t\t</li>)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</ul>\n\t\t</div>\n\t)\n}","import React, { useState, createContext, useEffect } from 'react';\n\nexport const UserNameContext = createContext();\n\nexport default function UserNameProvider({ children }) {\n\n\n\tconst [UserName, setUserName] = useState(localStorage.getItem(\"g-chatting-user-name\"));\n\n\tuseEffect(() => {\n\n\t\tlocalStorage.setItem(\"g-chatting-user-name\", UserName)\n\n\t}, [UserName]);\n\n\treturn (\n\t\t\t<UserNameContext.Provider value={{UserName, setUserName}}>\n\t\t\t\t{children}\n\t\t\t</UserNameContext.Provider>\n\t\t)\n}","import React, { useState, useContext, useEffect } from 'react';\n\nimport { UserNameContext } from \"../contexts/UserNameContext\";\nimport { ChatContext } from \"../contexts/ChatContext\";\nimport { SocketContext } from \"../contexts/SocketContext\";\n\nexport default function Input() {\n\n\tconst [nameModalIsOpen, setNameModalIsOpen] = useState('display-none');\n\tconst [name, setName] = useState('');\n\tconst [newMessage, setNewMessage] = useState('');\n\n\tconst { UserName, setUserName } = useContext(UserNameContext);\n\tconst { refreshMessage } = useContext(ChatContext);\n\tconst socket = useContext(SocketContext);\n\n\tuseEffect(() => {\n\n\t\tsetNameModalIsOpen(UserName ? 'display-none' : \"modal\");\n\n\t\tsocket.emit(\"user_connected\", UserName);\n\n\t\tsocket.on(\"message_received\", message => {\n\t\t\tconst oldMessages = JSON.parse(localStorage.getItem(\"g-chatting-messages\") || '[]')\n\t\t\tlocalStorage.setItem(\"g-chatting-messages\", JSON.stringify([...oldMessages,message]))\n\t\t\trefreshMessage()\n\t\t})\n\n\t}, [])\n\n\tconst addName = e => {\n\t\te.preventDefault();\n\t\tsetUserName(name);\n\t\tsocket.emit(\"user_connected\", name);\n\t\tsetNameModalIsOpen(\"display-none\");\n\t}\n\n\tconst addMessage = e => {\n\t\te.preventDefault();\n\t\tsocket.emit('new_message', newMessage);\n\t\tconst oldMessages = JSON.parse(localStorage.getItem(\"g-chatting-messages\") || '[]')\n\t\tlocalStorage.setItem(\"g-chatting-messages\", JSON.stringify([...oldMessages, {user:'You',message:newMessage}]))\n\t\tsetNewMessage('');\n\t\trefreshMessage()\n\t}\n\n\treturn (\n\t\t<>\n\t\t<form className=\"form-container\">\n\t\t\t<input \n\t\t\t\tvalue={newMessage} \n\t\t\t\tonChange={e => setNewMessage(e.target.value)} \n\t\t\t\ttype=\"text\" \n\t\t\t\tclassName=\"input-field\" autoFocus \n\t\t\t/>\n\t\t\t<button onClick={addMessage} type=\"submit\" className=\"btn\">Send</button>\n\t\t</form>\n\t\t<div className={nameModalIsOpen} >\n\t\t\t<div className=\"modal-container\">\n\t\t\t\t<h2>Your Name:</h2>\n\t\t\t\t<form>\n\t\t\t\t\t<input \n\t\t\t\t\t\tvalue={name} \n\t\t\t\t\t\tonChange={e => setName(e.target.value)} \n\t\t\t\t\t\tclassName=\"input-field\" \n\t\t\t\t\t\ttype=\"text\" autoFocus \n\t\t\t\t\t/>\n\t\t\t\t\t<button type=\"submit\" onClick={addName} className=\"btn\">OK</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t</div>\n\t\t</>\n\t)\n}","import React, { useContext } from 'react';\n\nimport { ThemeContext } from \"../contexts/ThemeContext\";\n\nimport Header from './Header';\nimport ChatArea from \"./ChatArea\";\nimport Input from \"./Input\";\n\nexport default function Interface() {\n\n\tconst { Theme } = useContext(ThemeContext);\n\n\treturn (\n\t\t<div className={`container ${Theme}`}>\n\t\t\t<Header />\n\t\t\t<ChatArea />\n\t\t\t<Input />\n\t\t</div>\n\t)\n}","import React from 'react';\nimport ThemeProvider from \"./ThemeContext\";\nimport UserNameProvider from \"./UserNameContext\";\nimport ChatProvider from \"./ChatContext\";\nimport SocketProvider from \"./SocketContext\";\n\nexport default function Provider({ children }) {\n\treturn (\n\t\t<SocketProvider>\n\t\t\t<ThemeProvider>\n\t\t\t\t<UserNameProvider>\n\t\t\t\t\t<ChatProvider>\n\t\t\t\t\t\t{ children }\n\t\t\t\t\t</ChatProvider>\n\t\t\t\t</UserNameProvider>\n\t\t\t</ThemeProvider>\n\t\t</SocketProvider>\n\t\t)\n}","import React from 'react';\nimport Interface from \"./components/interface\";\nimport Provider from \"./contexts/Provider\";\nimport './App.css';\n\nfunction App() {\n\n  \n\n  return (\n    <Provider>\n      <Interface />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}